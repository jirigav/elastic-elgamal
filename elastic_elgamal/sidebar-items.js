initSidebarItems({"enum":[["PublicKeyConversionError","Errors that can occur when converting other types to [`PublicKey`]."],["VerificationError","Error verifying base proofs, such as [`RingProof`], [`LogEqualityProof`] or [`ProofOfPossession`]."]],"mod":[["app","High-level applications for proofs defined in this crate."],["group","Traits and implementations for prime-order groups in which the decisional Diffie–Hellman (DDH), computational Diffie–Hellman (CDH) and discrete log (DL) problems are believed to be hard."],["sharing","Feldman’s verifiable secret sharing (VSS) for ElGamal encryption."]],"struct":[["CandidateDecryption","Candidate for a [`VerifiableDecryption`] that is not yet verified. This presentation should be used for decryption data retrieved from an untrusted source."],["Ciphertext","Ciphertext for ElGamal encryption."],["CiphertextWithValue","ElGamal [`Ciphertext`] together with fully retained information about the encrypted value and randomness used to create the ciphertext."],["DiscreteLogTable","Lookup table for discrete logarithms."],["Keypair","Keypair for ElGamal encryption and related protocols, consisting of a [`SecretKey`] and the matching [`PublicKey`]."],["LogEqualityProof","Zero-knowledge proof of equality of two discrete logarithms in different bases, aka Chaum–Pedersen protocol."],["PreparedRange","[`RangeDecomposition`] together with values precached for creating and/or verifying [`RangeProof`]s in a certain [`Group`]."],["ProofOfPossession","Zero-knowledge proof of possession of one or more secret scalars."],["PublicKey","Public key for ElGamal encryption and related protocols."],["RangeDecomposition","Decomposition of an integer range `0..n` into one or more sub-ranges. Decomposing the range allows constructing [`RangeProof`]s with size / computational complexity `O(log n)`."],["RangeProof","Zero-knowledge proof that an ElGamal ciphertext encrypts a value into a certain range `0..n`."],["RingProof","Zero-knowledge proof that the one or more encrypted values is each in the a priori known set of admissible values. (Admissible values may differ among encrypted values.)"],["SecretKey","Secret key for ElGamal encryption and related protocols. This is a thin wrapper around the [`Group`] scalar."],["SumOfSquaresProof","Zero-knowledge proof that an ElGamal-encrypted value is equal to a sum of squares of one or more other ElGamal-encrypted values."],["VerifiableDecryption","Verifiable decryption for a certain [`Ciphertext`] in the ElGamal encryption scheme. Usable both for standalone proofs and in threshold encryption."]]});